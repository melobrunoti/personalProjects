{"version":3,"file":"index.modern.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["import dayjs from \"dayjs\";\nimport utc from \"dayjs/plugin/utc\"; // dependent on utc plugin\nimport timezone from \"dayjs/plugin/timezone\";\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\ndayjs.extend(customParseFormat);\n\nexport const validateState = (stateAbbrv, hd) => {\n  /**\n   * Throws error to the console if a US State abbreviation is invalid, otherwise returns true\n   *\n   * @param {str} stateAbbrv: State abbreviation. eg \"pa\"\n   * @returns {boolean} returns true if valid US state\n   */\n  let stateList = Object.keys(hd.getStates(\"US\"));\n  stateList = [...stateList, \"US\", \"USA\"];\n  const stateInList = stateList.includes(stateAbbrv.toUpperCase());\n  if (!stateInList) {\n    throw `${stateAbbrv} is not a US state.`;\n  }\n  return true;\n};\n\nexport const validateDate = (inputDate) => {\n  /**\n   * Checks that provided date is in valid format and returns date as a dayjs object.\n   *\n   * @param {string|Dayjs|Date} inputDate - date to validate\n   * @returns {Dayjs} inputDate converted into Dayjs object.\n   */\n  try {\n    inputDate = dayjs.tz(inputDate, \"YYYY-MM-DD\", \"America/New_York\");\n  } catch (e) {\n    throw (\n      (\"Could not parse date. Please provide either a dayjs object, native Date object, or a string formatted as 'YYYY-MM-DD'\",\n      e)\n    );\n  }\n  return inputDate;\n};\n\nexport const getHolidayRule = (hd, holName, year) => {\n  /**\n   * Gets the date-holiday defined 'rule' for a specific holiday. Returns empty string if name isn't found.\n   *\n   * @param {Holidays} hd - Holidays instance\n   * @param {string} holName - name of holiday. eg. \"Christmas Day\"\n   * @returns {string}\n   */\n  const holList = hd.getHolidays(year);\n  const hol = holList.find((item) => {\n    return item.name.toLowerCase() === holName.toLowerCase();\n  });\n  if (hol) {\n    return hol.rule;\n  }\n  return \"\";\n};\n\nexport const filterHolidays = (hd, arrHols) => {\n  /**\n   * Takes a Holidays instance and list of holidays and sets each holiday's type as 'optional' in the instance.\n   * \n   * @param {Holidays} hd - Holidays instance\n   * @param {Array.<string>} arrHols - array of holiday names. eg [\"Christmas Day\", \"New Year's Day\"]\n   * @returns {undefined} \n\n   */\n  arrHols.forEach((holName) => {\n    const rule = getHolidayRule(hd, holName, \"2020\");\n    if (rule) {\n      hd.setHoliday(rule, { name: holName, type: \"optional\" });\n    }\n  });\n};\n\nexport const addPublicHolidays = (hd, arrHols) => {\n  /**\n   * Takes a Holidays instance and adds a list of custom public holidays.\n   * \n   * @param {Holidays} hd - Holidays instance\n   * @param {Array.<Object>} arrHols - list of objects representing custom holidays.\n   * @returns {undefined} \n\n   */\n  arrHols.forEach(({ rule, name }) => {\n    if (rule && name) {\n      hd.setHoliday(rule, { name, type: \"public\" });\n    } else {\n      throw \"Custom holidays must include a rule and a name\";\n    }\n  });\n};\n","import Holidays from \"date-holidays\";\n\nimport {\n  validateState,\n  validateDate,\n  filterHolidays,\n  addPublicHolidays,\n} from \"./utils\";\n\nconst businessDays = ({\n  state = \"US\",\n  excludeHolidays = [],\n  addHolidays = [],\n} = {}) => {\n  /**\n   * Factory function that creates a businessDays object.\n   *\n   * @param {string} options.state – U.S. state to determine holidays. Eg. \"pa\". Defaults to \"USA\"\n   * @param {Array} options.excludeHolidays – list of strings with holiday names to exclude from being considered as non-business days.\n   * @returns {businessDays} businessDays object\n   */\n  const hd = new Holidays();\n  validateState(state, hd);\n  const cleanUSState = state.toUpperCase();\n  if (cleanUSState === \"US\" || cleanUSState === \"USA\") {\n    hd.init(\"US\");\n  } else {\n    hd.init(\"US\", cleanUSState);\n  }\n  if (excludeHolidays.length > 0) {\n    filterHolidays(hd, excludeHolidays);\n  }\n  if (addHolidays.length > 0) {\n    addPublicHolidays(hd, addHolidays);\n  }\n  return {\n    hd,\n    USState: cleanUSState,\n    getHolidays(year) {\n      /**\n       * Returns an array of all public holidays for a given year.\n       *\n       * @param {string} year – year to get holidays for\n       * @returns {Array}\n       */\n      const publicHols = this.hd\n        .getHolidays(year)\n        .filter((item) => item.type === \"public\");\n      return publicHols;\n      // const publicHols = hols.filter(item => item.type === \"public\")\n      // return publicHols;\n    },\n    check(inputDate) {\n      /**\n       * Returns false if input date is on a weekend or a public holiday in Pennsylvania, USA.\n       *\n       * @param {string|Dayjs|Date} inputDate - date to check.\n       * @returns {bool} true if inputDate is a weekend or holiday\n       */\n      inputDate = validateDate(inputDate);\n      // Check if Sun (0) or Sat (6)\n      const dayOfWeek = inputDate.day();\n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        return false;\n      }\n      // Check if public holiday or substitute public holiday\n      const holidayObj = this.hd.isHoliday(inputDate.toDate());\n      if (holidayObj && holidayObj.type === \"public\") {\n        return false;\n      }\n      return true;\n    },\n    addDays(inputDate, days, { excludeInitialDate = true } = {}) {\n      /**\n       * Adds business days to a date and returns a new date as a DayJS object. First date is excluded from count by default.\n       *\n       * @param {string|Dayjs|Date} inputDate - a date to begin calculation from.\n       * @param {int} days - number of days to add to inputDate\n       * @param {bool} [options.excludeInitialDate=true] - whether to exclude the first date when adding.\n       * @returns {dayjs}\n       */\n      let counter = 0;\n      inputDate = validateDate(inputDate);\n      if (excludeInitialDate) {\n        inputDate = inputDate.add(1, \"day\");\n      }\n      while (counter < days) {\n        if (this.check(inputDate)) {\n          counter++;\n        }\n        if (counter < days) {\n          inputDate = inputDate.add(1, \"day\");\n        }\n      }\n      return inputDate;\n    },\n    countDays(dateStart, dateEnd, { excludeInitialDate = true } = {}) {\n      /**\n       * Returns an object with a tally of the number of business days, weekend days, and public holidays between two dates. First date is excluded from count by default.\n       *\n       * @param {string|Dayjs|Date} inputDate - a date to begin calculation from.\n       * @param {int} days - number of days to add to inputDate\n       * @param {bool} [options.excludeInitialDate=true] - whether to exclude the first date when adding.\n       * @returns {dayjs}\n       */\n      dateStart = validateDate(dateStart);\n      dateEnd = validateDate(dateEnd);\n      if (dateStart.isAfter(dateEnd)) {\n        throw `${dateStart} is after ${dateEnd}. Provide a start date that is earlier than end date in order to calculate days between`;\n      }\n      let totalDays = 0;\n      let holidays = 0;\n      let holidayList = [];\n      let weekendDays = 0;\n      let weekdays = 0;\n      let holidaysOnWeekends = 0;\n      let businessDays = 0;\n      let dateCounter = dateStart;\n      if (excludeInitialDate) {\n        dateCounter = dateStart.add(1, \"day\");\n      }\n      while (!dateCounter.isSame(dateEnd.add(1, \"day\"), \"day\")) {\n        totalDays++;\n        const holidayObj = this.hd.isHoliday(dateCounter.toDate());\n        const dayOfWeek = dateCounter.day();\n        if (holidayObj && holidayObj.type === \"public\") {\n          holidays++;\n          holidayList.push(holidayObj);\n        }\n        if ((dayOfWeek === 0) | (dayOfWeek === 6)) {\n          weekendDays++;\n        }\n        if (!((dayOfWeek === 0) | (dayOfWeek === 6))) {\n          weekdays++;\n        }\n        if (\n          (dayOfWeek === 0) | (dayOfWeek === 6) &&\n          holidayObj &&\n          holidayObj.type === \"public\"\n        ) {\n          holidaysOnWeekends++;\n        }\n        if (\n          !((dayOfWeek === 0) | (dayOfWeek === 6)) &&\n          !(holidayObj && holidayObj.type === \"public\")\n        ) {\n          businessDays++;\n        }\n        dateCounter = dateCounter.add(1, \"day\");\n      }\n      return {\n        totalDays,\n        holidays,\n        holidayList,\n        weekdays,\n        weekendDays,\n        holidaysOnWeekends,\n        businessDays,\n        nonBusinessDays: totalDays - businessDays,\n      };\n    },\n  };\n};\nexport default businessDays;\n"],"names":["dayjs","extend","utc","timezone","customParseFormat","validateDate","inputDate","tz","e","state","excludeHolidays","addHolidays","hd","Holidays","stateAbbrv","stateList","Object","keys","getStates","includes","toUpperCase","validateState","cleanUSState","init","length","arrHols","forEach","holName","rule","year","hol","getHolidays","find","item","name","toLowerCase","getHolidayRule","setHoliday","type","filterHolidays","addPublicHolidays","USState","this","filter","check","dayOfWeek","day","holidayObj","isHoliday","toDate","addDays","days","excludeInitialDate","counter","add","countDays","dateStart","dateEnd","isAfter","totalDays","holidays","holidayList","weekendDays","weekdays","holidaysOnWeekends","businessDays","dateCounter","isSame","push","nonBusinessDays"],"mappings":"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"}