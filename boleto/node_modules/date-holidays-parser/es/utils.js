function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * lodash compatible methods
 */
var deepmerge = require('deepmerge').all;
/**
 * get value at `keys` from `object`
 * @example
 * get({a: {b: {c: 2}}}, ['a', 'b', 'c']) //> 2
 */


var get = function get(obj, keys, def) {
  if (keys === void 0) {
    keys = [];
  }

  var o = obj;
  if (typeof keys === 'string') keys = keys.split('.');

  for (var _iterator = _createForOfIteratorHelperLoose(keys), _step; !(_step = _iterator()).done;) {
    var key = _step.value;

    if (o && o[key]) {
      o = o[key];
    } else {
      return def;
    }
  }

  return o;
};
/**
 * set `value` at `keys` from `object`
 * @example
 * set({a: {b: {c: 2}}}, ['a', 'b', 'c'], 3)
 */


var set = function set(obj, keys, value) {
  if (keys === void 0) {
    keys = [];
  }

  var key;
  var ref;
  var o = obj;

  for (var _iterator2 = _createForOfIteratorHelperLoose(keys), _step2; !(_step2 = _iterator2()).done;) {
    key = _step2.value;
    ref = o;
    if (toString.call(o[key]) !== '[object Object]') o[key] = {};
    o = o[key];
  }

  ref[key] = value;
  return obj;
};
/**
 * omit `object` properties `props`
 */


var omit = function omit(object, props) {
  if (props === void 0) {
    props = [];
  }

  return Object.keys(object).filter(function (p) {
    return !~props.indexOf(p);
  }).reduce(function (o, p) {
    p in object && (o[p] = object[p]);
    return o;
  }, {});
};

var merge = function merge() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return deepmerge(args);
};

module.exports = {
  get: get,
  set: set,
  omit: omit,
  merge: merge
};