'use strict';

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _require = require('./internal/utils'),
    isDate = _require.isDate;

var CalDate = require('caldate');

var CalEvent = /*#__PURE__*/function () {
  function CalEvent(opts) {
    opts = opts || {};
    this.substitute = opts.substitute;
    this.opts = opts;
    this.offset = opts.offset;
    this.dates = [];

    if (isDate(opts)) {
      this.opts = new CalDate(opts);
    }
  }

  var _proto = CalEvent.prototype;

  _proto.inYear = function inYear(year) {
    var d = new CalDate(this.opts).setOffset(this.offset);

    if (!(d.year && d.year !== year)) {
      d.year = year;
      this.dates.push(d);
    }

    return this;
  };

  _proto.reset = function reset() {
    this.dates = [];
  };

  _proto.isEqualDate = function isEqualDate(calEvent) {
    var res = false;

    for (var _iterator = _createForOfIteratorHelperLoose(this.dates), _step; !(_step = _iterator()).done;) {
      var thisDate = _step.value;

      for (var _iterator2 = _createForOfIteratorHelperLoose(calEvent.dates), _step2; !(_step2 = _iterator2()).done;) {
        var date = _step2.value;
        res |= thisDate.isEqualDate(date);
      }
    }

    return !!res;
  }
  /**
   * @param {Number} year - year to filter
   * @param {Object[]} active - definition of active ranges `{from: {Date}, [to]: {Date}}`
   * @return {this} for chaining
   */
  ;

  _proto.filter = function filter(year, active) {
    this.dates = this.dates.filter(function (date) {
      if (!date._filter && isActive(date, year, active)) {
        return date;
      }
    });
    return this;
  };

  _proto.push = function push(calEvent) {
    if (calEvent && Array.isArray(calEvent.dates)) {
      this.dates = this.dates.concat(calEvent.dates);
    }
  };

  _proto.get = function get(timezone) {
    var _this = this;

    var arr = this.dates.map(function (date) {
      var o = {
        date: date.toString(),
        start: date.toTimezone(timezone),
        end: date.toEndDate().toTimezone(timezone)
      };

      _this._addSubstitute(date, o);

      return o;
    });
    return arr;
  };

  _proto._addSubstitute = function _addSubstitute(date, obj) {
    if (this.substitute || date.substitute) obj.substitute = true;
  };

  return CalEvent;
}();

module.exports = CalEvent;

function isActive(date, year, active) {
  if (!active) {
    if (date.year === year) {
      return true;
    } else {
      return false;
    }
  }

  var _date = date.toDate();

  for (var _iterator3 = _createForOfIteratorHelperLoose(active), _step3; !(_step3 = _iterator3()).done;) {
    var a = _step3.value;
    var from = a.from,
        to = a.to;

    if (date.year === year && (from && to && from <= _date && to > _date || from && !to && from <= _date || !from && to && to > _date)) {
      return true;
    }
  }
}