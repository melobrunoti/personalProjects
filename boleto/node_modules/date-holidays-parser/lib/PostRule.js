'use strict';

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _get = require('./utils').get;

var CalEvent = require('./CalEvent');

var Parser = require('./Parser');

var PostRule = /*#__PURE__*/function () {
  /**
   * @param {String} ruleStr
   * @param {Object} opts
   * @param {Array} [holidays]
   */
  function PostRule(ruleStr, opts, holidays) {
    _classCallCheck(this, PostRule);

    this.opts = opts;
    this.ruleStr = ruleStr;
    this.ruleSet = holidays && holidays[ruleStr];
    this.holidays = holidays;
    this.events = [];
  }

  _createClass(PostRule, [{
    key: "push",
    value: function push(calEvent) {
      this.events.push(calEvent);
    }
  }, {
    key: "getEvent",
    value: function getEvent(year) {
      var active = this.ruleSet && this.ruleSet.active;
      this.disable(year);
      var ev = this.events[0];
      ev.filter(year, active);
      return ev;
    }
    /**
     * @param {Array} rule
     */

  }, {
    key: "resolve",
    value: function resolve(rule, year) {
      if (rule.rule && typeof this[rule.rule] === 'function') {
        this[rule.rule](rule, year);
      }
    }
    /**
     * @param {CalEvent} [calEvent]
     */

  }, {
    key: "bridge",
    value: function bridge(rule, year) {
      var found = new Array(this.events.length).fill(false);
      found[0] = true;
      var type = rule.type || 'public'; // get all holidays of the given year

      for (var ruleStr in this.holidays) {
        var dateFn = this.holidays[ruleStr].fn;

        if (dateFn && dateFn.ruleStr !== this.ruleStr) {
          var tmpEv = dateFn.inYear(year);
          var tmpEvType = _get(tmpEv, 'opts.type') || 'public';

          for (var i = 1; i < this.events.length; i++) {
            if (found[i]) continue;
            var isEqualDate = tmpEv.event.isEqualDate(this.events[i]);

            if (isEqualDate && tmpEvType === type) {
              found[i] = true;
            }
          }
        }

        if (!~found.indexOf(false)) {
          // pre-exit if all found
          break;
        }
      }

      if (~found.indexOf(false)) {
        this.events[0].reset();
      }
    }
  }, {
    key: "disable",
    value: function disable(year) {
      var ev = this.events[0];

      var tmpEv = this._findEventInYear(year, this.opts.disable);

      if (tmpEv) {
        if (tmpEv.isEqualDate(ev)) {
          ev.reset();
          tmpEv = this._findEventInYear(year, this.opts.enable);
          if (tmpEv) this.events[0] = tmpEv;
        }
      }
    }
  }, {
    key: "_findEventInYear",
    value: function _findEventInYear(year, arr) {
      arr = arr || [];
      var parser = new Parser();

      var _iterator = _createForOfIteratorHelper(arr),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;
          var p = parser.parse(item);

          if (p && p[0] && p[0].year && p[0].year === year) {
            return new CalEvent(p[0]).inYear(p[0].year);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);

  return PostRule;
}();

module.exports = PostRule;