'use strict';

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('./internal/utils'),
    isDate = _require.isDate;

var CalDate = require('caldate');

var CalEvent = /*#__PURE__*/function () {
  function CalEvent(opts) {
    _classCallCheck(this, CalEvent);

    opts = opts || {};
    this.substitute = opts.substitute;
    this.opts = opts;
    this.offset = opts.offset;
    this.dates = [];

    if (isDate(opts)) {
      this.opts = new CalDate(opts);
    }
  }

  _createClass(CalEvent, [{
    key: "inYear",
    value: function inYear(year) {
      var d = new CalDate(this.opts).setOffset(this.offset);

      if (!(d.year && d.year !== year)) {
        d.year = year;
        this.dates.push(d);
      }

      return this;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.dates = [];
    }
  }, {
    key: "isEqualDate",
    value: function isEqualDate(calEvent) {
      var res = false;

      var _iterator = _createForOfIteratorHelper(this.dates),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var thisDate = _step.value;

          var _iterator2 = _createForOfIteratorHelper(calEvent.dates),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var date = _step2.value;
              res |= thisDate.isEqualDate(date);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return !!res;
    }
    /**
     * @param {Number} year - year to filter
     * @param {Object[]} active - definition of active ranges `{from: {Date}, [to]: {Date}}`
     * @return {this} for chaining
     */

  }, {
    key: "filter",
    value: function filter(year, active) {
      this.dates = this.dates.filter(function (date) {
        if (!date._filter && isActive(date, year, active)) {
          return date;
        }
      });
      return this;
    }
  }, {
    key: "push",
    value: function push(calEvent) {
      if (calEvent && Array.isArray(calEvent.dates)) {
        this.dates = this.dates.concat(calEvent.dates);
      }
    }
  }, {
    key: "get",
    value: function get(timezone) {
      var _this = this;

      var arr = this.dates.map(function (date) {
        var o = {
          date: date.toString(),
          start: date.toTimezone(timezone),
          end: date.toEndDate().toTimezone(timezone)
        };

        _this._addSubstitute(date, o);

        return o;
      });
      return arr;
    }
  }, {
    key: "_addSubstitute",
    value: function _addSubstitute(date, obj) {
      if (this.substitute || date.substitute) obj.substitute = true;
    }
  }]);

  return CalEvent;
}();

module.exports = CalEvent;

function isActive(date, year, active) {
  if (!active) {
    if (date.year === year) {
      return true;
    } else {
      return false;
    }
  }

  var _date = date.toDate();

  var _iterator3 = _createForOfIteratorHelper(active),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var a = _step3.value;
      var from = a.from,
          to = a.to;

      if (date.year === year && (from && to && from <= _date && to > _date || from && !to && from <= _date || !from && to && to > _date)) {
        return true;
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}