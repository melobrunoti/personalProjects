"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.general = general;
exports.equatorial = equatorial;
exports.horizontal = horizontal;
exports.vertical = vertical;
exports["default"] = void 0;

var _base = _interopRequireDefault(require("./base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Point return type represents a point to be used in constructing the sundial.
 */
function Point(x, y) {
  this.x = x || 0;
  this.y = y || 0;
}
/**
 * Line holds data to draw an hour line on the sundial.
 */


function Line(hour, points) {
  this.hour = hour; // 0 to 24

  this.points = points || []; // One or more points corresponding to the hour.
}

var m = [-23.44, -20.15, -11.47, 0, 11.47, 20.15, 23.44];
/**
 * General computes data for the general case of a planar sundial.
 *
 * Argument φ is geographic latitude at which the sundial will be located.
 * D is gnomonic declination, the azimuth of the perpendicular to the plane
 * of the sundial, measured from the southern meridian towards the west.
 * Argument a is the length of a straight stylus perpendicular to the plane
 * of the sundial, z is zenithal distance of the direction defined by the
 * stylus.  Angles φ, D, and z are in radians.  Units of stylus length a
 * are arbitrary.
 *
 * Results consist of a set of lines, a center point, u, the length of a
 * polar stylus, and ψ, the angle which the polar stylus makes with the plane
 * of the sundial.  The center point, the points defining the hour lines, and
 * u are in units of a, the stylus length.  ψ is in radians.
 */

function general(φ, D, a, z) {
  // (φ, D, a, z float64)  (lines []Line, center Point, u, ψ float64)
  var _base$sincos = _base["default"].sincos(φ),
      _base$sincos2 = _slicedToArray(_base$sincos, 2),
      sφ = _base$sincos2[0],
      cφ = _base$sincos2[1];

  var tφ = sφ / cφ;

  var _base$sincos3 = _base["default"].sincos(D),
      _base$sincos4 = _slicedToArray(_base$sincos3, 2),
      sD = _base$sincos4[0],
      cD = _base$sincos4[1];

  var _base$sincos5 = _base["default"].sincos(z),
      _base$sincos6 = _slicedToArray(_base$sincos5, 2),
      sz = _base$sincos6[0],
      cz = _base$sincos6[1];

  var P = sφ * cz - cφ * sz * cD;
  var lines = [];

  for (var i = 0; i < 24; i++) {
    var l = new Line(i);
    var H = (i - 12) * 15 * Math.PI / 180;
    var aH = Math.abs(H);

    var _base$sincos7 = _base["default"].sincos(H),
        _base$sincos8 = _slicedToArray(_base$sincos7, 2),
        sH = _base$sincos8[0],
        cH = _base$sincos8[1];

    var _iterator = _createForOfIteratorHelper(m),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var d = _step.value;
        var tδ = Math.tan(d * Math.PI / 180);
        var H0 = Math.acos(-tφ * tδ);

        if (aH > H0) {
          continue; // sun below horizon
        }

        var Q = sD * sz * sH + (cφ * cz + sφ * sz * cD) * cH + P * tδ;

        if (Q < 0) {
          continue; // sun below plane of sundial
        }

        var Nx = cD * sH - sD * (sφ * cH - cφ * tδ);
        var Ny = cz * sD * sH - (cφ * sz - sφ * cz * cD) * cH - (sφ * sz + cφ * cz * cD) * tδ;
        l.points.push(new Point(a * Nx / Q, a * Ny / Q));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    if (l.points.length > 0) {
      lines.push(l);
    }
  }

  var center = new Point();
  center.x = a / P * cφ * sD;
  center.y = -a / P * (sφ * sz + cφ * cz * cD);
  var aP = Math.abs(P);
  var u = a / aP;
  var ψ = Math.asin(aP);
  return {
    lines: lines,
    center: center,
    length: u,
    angle: ψ
  };
}
/**
 * Equatorial computes data for a sundial level with the equator.
 *
 * Argument φ is geographic latitude at which the sundial will be located;
 * a is the length of a straight stylus perpendicular to the plane of the
 * sundial.
 *
 * The sundial will have two sides, north and south.  Results n and s define
 * lines on the north and south sides of the sundial.  Result coordinates
 * are in units of a, the stylus length.
 */


function equatorial(φ, a) {
  // (φ, a float64)  (n, s []Line)
  var tφ = Math.tan(φ);
  var n = [];
  var s = [];

  for (var i = 0; i < 24; i++) {
    var nl = new Line(i);
    var sl = new Line(i);
    var H = (i - 12) * 15 * Math.PI / 180;
    var aH = Math.abs(H);

    var _base$sincos9 = _base["default"].sincos(H),
        _base$sincos10 = _slicedToArray(_base$sincos9, 2),
        sH = _base$sincos10[0],
        cH = _base$sincos10[1];

    var _iterator2 = _createForOfIteratorHelper(m),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var d = _step2.value;
        var tδ = Math.tan(d * Math.PI / 180);
        var H0 = Math.acos(-tφ * tδ);

        if (aH > H0) {
          continue;
        }

        var x = -a * sH / tδ;
        var yy = a * cH / tδ;

        if (tδ < 0) {
          sl.points.push(new Point(x, yy));
        } else {
          nl.points.push(new Point(x, -yy));
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    if (nl.points.length > 0) {
      n.push(nl);
    }

    if (sl.points.length > 0) {
      s.push(sl);
    }
  }

  return {
    north: n,
    south: s
  };
}
/**
 * Horizontal computes data for a horizontal sundial.
 *
 * Argument φ is geographic latitude at which the sundial will be located,
 * a is the length of a straight stylus perpendicular to the plane of the
 * sundial.
 *
 * Results consist of a set of lines, a center point, and u, the length of a
 * polar stylus.  They are in units of a, the stylus length.
 */


function horizontal(φ, a) {
  // (φ, a float64)  (lines []Line, center Point, u float64)
  var _base$sincos11 = _base["default"].sincos(φ),
      _base$sincos12 = _slicedToArray(_base$sincos11, 2),
      sφ = _base$sincos12[0],
      cφ = _base$sincos12[1];

  var tφ = sφ / cφ;
  var lines = [];

  for (var i = 0; i < 24; i++) {
    var l = new Line(i);
    var H = (i - 12) * 15 * Math.PI / 180;
    var aH = Math.abs(H);

    var _base$sincos13 = _base["default"].sincos(H),
        _base$sincos14 = _slicedToArray(_base$sincos13, 2),
        sH = _base$sincos14[0],
        cH = _base$sincos14[1];

    var _iterator3 = _createForOfIteratorHelper(m),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var d = _step3.value;
        var tδ = Math.tan(d * Math.PI / 180);
        var H0 = Math.acos(-tφ * tδ);

        if (aH > H0) {
          continue; // sun below horizon
        }

        var Q = cφ * cH + sφ * tδ;
        var x = a * sH / Q;
        var y = a * (sφ * cH - cφ * tδ) / Q;
        l.points.push(new Point(x, y));
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    if (l.points.length > 0) {
      lines.push(l);
    }
  }

  var center = new Point(0, -a / tφ);
  var u = a / Math.abs(sφ);
  return {
    lines: lines,
    center: center,
    length: u
  };
}
/**
 * Vertical computes data for a vertical sundial.
 *
 * Argument φ is geographic latitude at which the sundial will be located.
 * D is gnomonic declination, the azimuth of the perpendicular to the plane
 * of the sundial, measured from the southern meridian towards the west.
 * Argument a is the length of a straight stylus perpendicular to the plane
 * of the sundial.
 *
 * Results consist of a set of lines, a center point, and u, the length of a
 * polar stylus.  They are in units of a, the stylus length.
 */


function vertical(φ, D, a) {
  // (φ, D, a float64)  (lines []Line, center Point, u float64)
  var _base$sincos15 = _base["default"].sincos(φ),
      _base$sincos16 = _slicedToArray(_base$sincos15, 2),
      sφ = _base$sincos16[0],
      cφ = _base$sincos16[1];

  var tφ = sφ / cφ;

  var _base$sincos17 = _base["default"].sincos(D),
      _base$sincos18 = _slicedToArray(_base$sincos17, 2),
      sD = _base$sincos18[0],
      cD = _base$sincos18[1];

  var lines = [];

  for (var i = 0; i < 24; i++) {
    var l = new Line(i);
    var H = (i - 12) * 15 * Math.PI / 180;
    var aH = Math.abs(H);

    var _base$sincos19 = _base["default"].sincos(H),
        _base$sincos20 = _slicedToArray(_base$sincos19, 2),
        sH = _base$sincos20[0],
        cH = _base$sincos20[1];

    var _iterator4 = _createForOfIteratorHelper(m),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var d = _step4.value;
        var tδ = Math.tan(d * Math.PI / 180);
        var H0 = Math.acos(-tφ * tδ);

        if (aH > H0) {
          continue; // sun below horizon
        }

        var Q = sD * sH + sφ * cD * cH - cφ * cD * tδ;

        if (Q < 0) {
          continue; // sun below plane of sundial
        }

        var x = a * (cD * sH - sφ * sD * cH + cφ * sD * tδ) / Q;
        var y = -a * (cφ * cH + sφ * tδ) / Q;
        l.points.push(new Point(x, y));
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }

    if (l.points.length > 0) {
      lines.push(l);
    }
  }

  var center = new Point();
  center.x = -a * sD / cD;
  center.y = a * tφ / cD;
  var u = a / Math.abs(cφ * cD);
  return {
    lines: lines,
    center: center,
    length: u
  };
}

var _default = {
  general: general,
  equatorial: equatorial,
  horizontal: horizontal,
  vertical: vertical
};
exports["default"] = _default;