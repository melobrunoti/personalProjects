function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * @copyright 2013 Sonia Keys
 * @copyright 2016 commenthol
 * @license MIT
 * @module stellar
 */

/**
 * Stellar: Chapter 56, Stellar Magnitudes.
 */

/**
 * Sum returns the combined apparent magnitude of two stars.
 */
export function sum(m1, m2) {
  // (m1, m2 float64)  float64
  var x = 0.4 * (m2 - m1);
  return m2 - 2.5 * Math.log10(Math.pow(10, x) + 1);
}
/**
 * SumN returns the combined apparent magnitude of a number of stars.
 */

export function sumN(m) {
  // (m ...float64)  float64
  var s = 0;

  for (var _iterator = _createForOfIteratorHelperLoose(m), _step; !(_step = _iterator()).done;) {
    var mi = _step.value;
    s += Math.pow(10, -0.4 * mi);
  }

  return -2.5 * Math.log10(s);
}
/**
 * Ratio returns the brightness ratio of two stars.
 *
 * Arguments m1, m2 are apparent magnitudes.
 */

export function ratio(m1, m2) {
  // (m1, m2 float64)  float64
  var x = 0.4 * (m2 - m1);
  return Math.pow(10, x);
}
/**
 * Difference returns the difference in apparent magnitude of two stars
 * given their brightness ratio.
 */

export function difference(ratio) {
  // (ratio float64)  float64
  return 2.5 * Math.log10(ratio);
}
/**
 * AbsoluteByParallax returns absolute magnitude given annual parallax.
 *
 * Argument m is apparent magnitude, π is annual parallax in arc seconds.
 */

export function absoluteByParallax(m, π) {
  // (m, π float64)  float64
  return m + 5 + 5 * Math.log10(π);
}
/**
 * AbsoluteByDistance returns absolute magnitude given distance.
 *
 * Argument m is apparent magnitude, d is distance in parsecs.
 */

export function absoluteByDistance(m, d) {
  // (m, d float64)  float64
  return m + 5 - 5 * Math.log10(d);
}
export default {
  sum: sum,
  sumN: sumN,
  ratio: ratio,
  difference: difference,
  absoluteByParallax: absoluteByParallax,
  absoluteByDistance: absoluteByDistance
};